{"ast":null,"code":"'use strict';\n\nvar isArray = require('lodash/isArray');\n\nvar isPlainObject = require('lodash/isPlainObject');\n\nvar assign = require('lodash/assign');\n\nvar forEach = require('lodash/forEach');\n\nvar map = require('lodash/map');\n\nvar deprecate = require('./deprecate');\n\nvar Query = require('./query');\n\nvar Record = require('./record');\n\nvar callbackToPromise = require('./callback_to_promise');\n\nfunction Table(base, tableId, tableName) {\n  if (!tableId && !tableName) {\n    throw new Error('Table name or table ID is required');\n  }\n\n  this._base = base;\n  this.id = tableId;\n  this.name = tableName; // Public API\n\n  this.find = callbackToPromise(this._findRecordById, this);\n  this.select = this._selectRecords.bind(this);\n  this.create = callbackToPromise(this._createRecords, this);\n  this.update = callbackToPromise(this._updateRecords.bind(this, false), this);\n  this.replace = callbackToPromise(this._updateRecords.bind(this, true), this);\n  this.destroy = callbackToPromise(this._destroyRecord, this); // Deprecated API\n\n  this.list = deprecate(this._listRecords.bind(this), 'table.list', 'Airtable: `list()` is deprecated. Use `select()` instead.');\n  this.forEach = deprecate(this._forEachRecord.bind(this), 'table.forEach', 'Airtable: `forEach()` is deprecated. Use `select()` instead.');\n}\n\nTable.prototype._findRecordById = function (recordId, done) {\n  var record = new Record(this, recordId);\n  record.fetch(done);\n};\n\nTable.prototype._selectRecords = function (params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  if (arguments.length > 1) {\n    console.warn('Airtable: `select` takes only one parameter, but it was given ' + arguments.length + ' parameters. ' + 'Use `eachPage` or `firstPage` to fetch records.');\n  }\n\n  if (isPlainObject(params)) {\n    var validationResults = Query.validateParams(params);\n\n    if (validationResults.errors.length) {\n      var formattedErrors = map(validationResults.errors, function (error) {\n        return '  * ' + error;\n      });\n      throw new Error('Airtable: invalid parameters for `select`:\\n' + formattedErrors.join('\\n'));\n    }\n\n    if (validationResults.ignoredKeys.length) {\n      console.warn('Airtable: the following parameters to `select` will be ignored: ' + validationResults.ignoredKeys.join(', '));\n    }\n\n    return new Query(this, validationResults.validParams);\n  } else {\n    throw new Error('Airtable: the parameter for `select` should be a plain object or undefined.');\n  }\n};\n\nTable.prototype._urlEncodedNameOrId = function () {\n  return this.id || encodeURIComponent(this.name);\n};\n\nTable.prototype._createRecords = function (recordsData, optionalParameters, done) {\n  var that = this;\n  var isCreatingMultipleRecords = isArray(recordsData);\n\n  if (!done) {\n    done = optionalParameters;\n    optionalParameters = {};\n  }\n\n  var requestData;\n\n  if (isCreatingMultipleRecords) {\n    requestData = {\n      records: recordsData\n    };\n  } else {\n    requestData = {\n      fields: recordsData\n    };\n  }\n\n  assign(requestData, optionalParameters);\n\n  this._base.runAction('post', '/' + that._urlEncodedNameOrId() + '/', {}, requestData, function (err, resp, body) {\n    if (err) {\n      done(err);\n      return;\n    }\n\n    var result;\n\n    if (isCreatingMultipleRecords) {\n      result = body.records.map(function (record) {\n        return new Record(that, record.id, record);\n      });\n    } else {\n      result = new Record(that, body.id, body);\n    }\n\n    done(null, result);\n  });\n};\n\nTable.prototype._updateRecords = function (isDestructiveUpdate, recordsDataOrRecordId, recordDataOrOptsOrDone, optsOrDone, done) {\n  var opts;\n\n  if (isArray(recordsDataOrRecordId)) {\n    var that = this;\n    var recordsData = recordsDataOrRecordId;\n    opts = isPlainObject(recordDataOrOptsOrDone) ? recordDataOrOptsOrDone : {};\n    done = optsOrDone || recordDataOrOptsOrDone;\n    var method = isDestructiveUpdate ? 'put' : 'patch';\n    var requestData = assign({\n      records: recordsData\n    }, opts);\n\n    this._base.runAction(method, '/' + this._urlEncodedNameOrId() + '/', {}, requestData, function (err, resp, body) {\n      if (err) {\n        done(err);\n        return;\n      }\n\n      var result = body.records.map(function (record) {\n        return new Record(that, record.id, record);\n      });\n      done(null, result);\n    });\n  } else {\n    var recordId = recordsDataOrRecordId;\n    var recordData = recordDataOrOptsOrDone;\n    opts = isPlainObject(optsOrDone) ? optsOrDone : {};\n    done = done || optsOrDone;\n    var record = new Record(this, recordId);\n\n    if (isDestructiveUpdate) {\n      record.putUpdate(recordData, opts, done);\n    } else {\n      record.patchUpdate(recordData, opts, done);\n    }\n  }\n};\n\nTable.prototype._destroyRecord = function (recordIdsOrId, done) {\n  if (isArray(recordIdsOrId)) {\n    var that = this;\n    var queryParams = {\n      records: recordIdsOrId\n    };\n\n    this._base.runAction('delete', '/' + this._urlEncodedNameOrId(), queryParams, null, function (err, response, results) {\n      if (err) {\n        done(err);\n        return;\n      }\n\n      var records = map(results.records, function (recordJson) {\n        return new Record(that, recordJson.id, null);\n      });\n      done(null, records);\n    });\n  } else {\n    var record = new Record(this, recordIdsOrId);\n    record.destroy(done);\n  }\n};\n\nTable.prototype._listRecords = function (limit, offset, opts, done) {\n  var that = this;\n\n  if (!done) {\n    done = opts;\n    opts = {};\n  }\n\n  var listRecordsParameters = assign({\n    limit: limit,\n    offset: offset\n  }, opts);\n\n  this._base.runAction('get', '/' + this._urlEncodedNameOrId() + '/', listRecordsParameters, null, function (err, response, results) {\n    if (err) {\n      done(err);\n      return;\n    }\n\n    var records = map(results.records, function (recordJson) {\n      return new Record(that, null, recordJson);\n    });\n    done(null, records, results.offset);\n  });\n};\n\nTable.prototype._forEachRecord = function (opts, callback, done) {\n  if (arguments.length === 2) {\n    done = callback;\n    callback = opts;\n    opts = {};\n  }\n\n  var that = this;\n  var limit = Table.__recordsPerPageForIteration || 100;\n  var offset = null;\n\n  var nextPage = function () {\n    that._listRecords(limit, offset, opts, function (err, page, newOffset) {\n      if (err) {\n        done(err);\n        return;\n      }\n\n      forEach(page, callback);\n\n      if (newOffset) {\n        offset = newOffset;\n        nextPage();\n      } else {\n        done();\n      }\n    });\n  };\n\n  nextPage();\n};\n\nmodule.exports = Table;","map":{"version":3,"sources":["/Users/gauravsingh/Desktop/projects/Lucky-India/node_modules/airtable/lib/table.js"],"names":["isArray","require","isPlainObject","assign","forEach","map","deprecate","Query","Record","callbackToPromise","Table","base","tableId","tableName","Error","_base","id","name","find","_findRecordById","select","_selectRecords","bind","create","_createRecords","update","_updateRecords","replace","destroy","_destroyRecord","list","_listRecords","_forEachRecord","prototype","recordId","done","record","fetch","params","arguments","length","console","warn","validationResults","validateParams","errors","formattedErrors","error","join","ignoredKeys","validParams","_urlEncodedNameOrId","encodeURIComponent","recordsData","optionalParameters","that","isCreatingMultipleRecords","requestData","records","fields","runAction","err","resp","body","result","isDestructiveUpdate","recordsDataOrRecordId","recordDataOrOptsOrDone","optsOrDone","opts","method","recordData","putUpdate","patchUpdate","recordIdsOrId","queryParams","response","results","recordJson","limit","offset","listRecordsParameters","callback","__recordsPerPageForIteration","nextPage","page","newOffset","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar isArray = require('lodash/isArray');\nvar isPlainObject = require('lodash/isPlainObject');\nvar assign = require('lodash/assign');\nvar forEach = require('lodash/forEach');\nvar map = require('lodash/map');\n\nvar deprecate = require('./deprecate');\nvar Query = require('./query');\nvar Record = require('./record');\nvar callbackToPromise = require('./callback_to_promise');\n\nfunction Table(base, tableId, tableName) {\n    if (!tableId && !tableName) {\n        throw new Error('Table name or table ID is required');\n    }\n\n    this._base = base;\n    this.id = tableId;\n    this.name = tableName;\n\n    // Public API\n    this.find = callbackToPromise(this._findRecordById, this);\n    this.select = this._selectRecords.bind(this);\n    this.create = callbackToPromise(this._createRecords, this);\n    this.update = callbackToPromise(this._updateRecords.bind(this, false), this);\n    this.replace = callbackToPromise(this._updateRecords.bind(this, true), this);\n    this.destroy = callbackToPromise(this._destroyRecord, this);\n\n    // Deprecated API\n    this.list = deprecate(\n        this._listRecords.bind(this),\n        'table.list',\n        'Airtable: `list()` is deprecated. Use `select()` instead.'\n    );\n    this.forEach = deprecate(\n        this._forEachRecord.bind(this),\n        'table.forEach',\n        'Airtable: `forEach()` is deprecated. Use `select()` instead.'\n    );\n}\n\nTable.prototype._findRecordById = function(recordId, done) {\n    var record = new Record(this, recordId);\n    record.fetch(done);\n};\n\nTable.prototype._selectRecords = function(params) {\n    if (params === void 0) {\n        params = {};\n    }\n\n    if (arguments.length > 1) {\n        console.warn(\n            'Airtable: `select` takes only one parameter, but it was given ' +\n                arguments.length +\n                ' parameters. ' +\n                'Use `eachPage` or `firstPage` to fetch records.'\n        );\n    }\n\n    if (isPlainObject(params)) {\n        var validationResults = Query.validateParams(params);\n\n        if (validationResults.errors.length) {\n            var formattedErrors = map(validationResults.errors, function(error) {\n                return '  * ' + error;\n            });\n\n            throw new Error(\n                'Airtable: invalid parameters for `select`:\\n' + formattedErrors.join('\\n')\n            );\n        }\n\n        if (validationResults.ignoredKeys.length) {\n            console.warn(\n                'Airtable: the following parameters to `select` will be ignored: ' +\n                    validationResults.ignoredKeys.join(', ')\n            );\n        }\n\n        return new Query(this, validationResults.validParams);\n    } else {\n        throw new Error(\n            'Airtable: the parameter for `select` should be a plain object or undefined.'\n        );\n    }\n};\n\nTable.prototype._urlEncodedNameOrId = function() {\n    return this.id || encodeURIComponent(this.name);\n};\n\nTable.prototype._createRecords = function(recordsData, optionalParameters, done) {\n    var that = this;\n    var isCreatingMultipleRecords = isArray(recordsData);\n\n    if (!done) {\n        done = optionalParameters;\n        optionalParameters = {};\n    }\n    var requestData;\n    if (isCreatingMultipleRecords) {\n        requestData = {records: recordsData};\n    } else {\n        requestData = {fields: recordsData};\n    }\n    assign(requestData, optionalParameters);\n    this._base.runAction('post', '/' + that._urlEncodedNameOrId() + '/', {}, requestData, function(\n        err,\n        resp,\n        body\n    ) {\n        if (err) {\n            done(err);\n            return;\n        }\n\n        var result;\n        if (isCreatingMultipleRecords) {\n            result = body.records.map(function(record) {\n                return new Record(that, record.id, record);\n            });\n        } else {\n            result = new Record(that, body.id, body);\n        }\n        done(null, result);\n    });\n};\n\nTable.prototype._updateRecords = function(\n    isDestructiveUpdate,\n    recordsDataOrRecordId,\n    recordDataOrOptsOrDone,\n    optsOrDone,\n    done\n) {\n    var opts;\n\n    if (isArray(recordsDataOrRecordId)) {\n        var that = this;\n        var recordsData = recordsDataOrRecordId;\n        opts = isPlainObject(recordDataOrOptsOrDone) ? recordDataOrOptsOrDone : {};\n        done = optsOrDone || recordDataOrOptsOrDone;\n\n        var method = isDestructiveUpdate ? 'put' : 'patch';\n        var requestData = assign({records: recordsData}, opts);\n        this._base.runAction(\n            method,\n            '/' + this._urlEncodedNameOrId() + '/',\n            {},\n            requestData,\n            function(err, resp, body) {\n                if (err) {\n                    done(err);\n                    return;\n                }\n\n                var result = body.records.map(function(record) {\n                    return new Record(that, record.id, record);\n                });\n                done(null, result);\n            }\n        );\n    } else {\n        var recordId = recordsDataOrRecordId;\n        var recordData = recordDataOrOptsOrDone;\n        opts = isPlainObject(optsOrDone) ? optsOrDone : {};\n        done = done || optsOrDone;\n\n        var record = new Record(this, recordId);\n        if (isDestructiveUpdate) {\n            record.putUpdate(recordData, opts, done);\n        } else {\n            record.patchUpdate(recordData, opts, done);\n        }\n    }\n};\n\nTable.prototype._destroyRecord = function(recordIdsOrId, done) {\n    if (isArray(recordIdsOrId)) {\n        var that = this;\n        var queryParams = {records: recordIdsOrId};\n        this._base.runAction(\n            'delete',\n            '/' + this._urlEncodedNameOrId(),\n            queryParams,\n            null,\n            function(err, response, results) {\n                if (err) {\n                    done(err);\n                    return;\n                }\n\n                var records = map(results.records, function(recordJson) {\n                    return new Record(that, recordJson.id, null);\n                });\n                done(null, records);\n            }\n        );\n    } else {\n        var record = new Record(this, recordIdsOrId);\n        record.destroy(done);\n    }\n};\n\nTable.prototype._listRecords = function(limit, offset, opts, done) {\n    var that = this;\n\n    if (!done) {\n        done = opts;\n        opts = {};\n    }\n    var listRecordsParameters = assign(\n        {\n            limit: limit,\n            offset: offset,\n        },\n        opts\n    );\n\n    this._base.runAction(\n        'get',\n        '/' + this._urlEncodedNameOrId() + '/',\n        listRecordsParameters,\n        null,\n        function(err, response, results) {\n            if (err) {\n                done(err);\n                return;\n            }\n\n            var records = map(results.records, function(recordJson) {\n                return new Record(that, null, recordJson);\n            });\n            done(null, records, results.offset);\n        }\n    );\n};\n\nTable.prototype._forEachRecord = function(opts, callback, done) {\n    if (arguments.length === 2) {\n        done = callback;\n        callback = opts;\n        opts = {};\n    }\n    var that = this;\n    var limit = Table.__recordsPerPageForIteration || 100;\n    var offset = null;\n\n    var nextPage = function() {\n        that._listRecords(limit, offset, opts, function(err, page, newOffset) {\n            if (err) {\n                done(err);\n                return;\n            }\n\n            forEach(page, callback);\n\n            if (newOffset) {\n                offset = newOffset;\n                nextPage();\n            } else {\n                done();\n            }\n        });\n    };\n    nextPage();\n};\n\nmodule.exports = Table;\n"]},"metadata":{},"sourceType":"script"}